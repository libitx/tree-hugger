/** 
 * Tree Hugger - meta-tree-hugger [v0.1.0]
 * A Metanet tree traversal tool.
 * https://treehugger.bitpaste.app
 * Copyright Â© 2019 libitx
 */
!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(n=n||self).TreeHugger=e()}(this,function(){"use strict";function i(n,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function s(r){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{},e=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(o).filter(function(n){return Object.getOwnPropertyDescriptor(o,n).enumerable}))),e.forEach(function(n){var e,t,i;e=r,i=o[t=n],t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i})}return r}var n,f=(function(n,e){var t=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();n.exports=e=t.fetch,e.default=t.fetch.bind(t),e.Headers=t.Headers,e.Request=t.Request,e.Response=t.Response}(n={exports:{}},n.exports),n.exports),r=(f.Headers,f.Request,f.Response,{baseUrl:"https://mom.planaria.network/q/",headers:{},mapObject:function(n){return n},find:function(n,e){var t=this,i=1<arguments.length&&void 0!==e?e:{},r=this._buildQuery(n,i),o=this._encodeQuery(r),u=this.baseUrl+o,d=s({},this.headers,i.headers);return i.debug&&(console.log(JSON.stringify(r)),console.log(u)),f(u,{headers:d}).then(function(n){return n.json()}).then(function(n){return n.metanet.map(t.mapObject)})},findSingle:function(n,e){var t=s({sort:{"blk.i":-1,i:-1},limit:1},n);return this.find(t,e).then(function(n){return n[0]||null})},findAll:function(n,e){var t=s({sort:{"blk.i":1,i:1}},n);return this.find(t,e)},_buildQuery:function(n,e){var t=1<arguments.length&&void 0!==e?e:{},i={v:3,q:n},r=Object.keys(t).filter(function(n){return["aggregate","project","sort","limit","skip"].includes(n)}).reduce(function(n,e){return n[e]=t[e],n},{});return Object.assign(i.q,r),t.find&&Object.assign(i.q.find,t.find),i.q.project&&Object.assign(i.q.project,{node:1,parent:1,ancestor:1,child:1}),i},_encodeQuery:function(n){var e=JSON.stringify(n);return"function"==typeof btoa?btoa(e):Buffer.from(e).toString("base64")}}),e=function(){function MetaNode(n){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,MetaNode),this.tx=n}return function(n,e,t){e&&i(n.prototype,e),t&&i(n,t)}(MetaNode,[{key:"root",value:function(n){if(this.isRoot)return this;var e={"node.id":this.tx.ancestor[0].id};return r.findSingle({find:e},n)}},{key:"parent",value:function(n){if(this.isRoot)return null;var e={"node.id":this.tx.parent.id};return r.findSingle({find:e},n)}},{key:"ancestors",value:function(n){var e=this;if(this.isRoot)return[];var t={find:{"node.id":{$in:this.tx.ancestor.map(function(n){return n.id}).filter(function(n){return n!==e.id})}},sort:{"blk.i":-1,i:-1}};return r.findAll(t,n)}},{key:"siblings",value:function(n){if(this.isRoot)return[];var e={$and:[{"parent.id":this.tx.parent.id},{"node.id":{$ne:this.id}}],head:!0};return r.findAll({find:e},n)}},{key:"children",value:function(n){if(this.isLeaf)return[];var e={"parent.id":this.id,head:!0};return r.findAll({find:e},n)}},{key:"descendants",value:function(n){if(this.isLeaf)return[];var e={$and:[{"ancestor.id":this.id},{"node.id":{$ne:this.id}}],head:!0};return r.findAll({find:e},n)}},{key:"versions",value:function(n){var e={$and:[{"node.a":this.address},{"node.id":{$ne:this.id}}]};return r.findAll({find:e},n)}},{key:"selfAndAncestors",value:function(n){var e=this;return this.ancestors(n).then(function(n){return[e].concat(n)})}},{key:"selfAndSiblings",value:function(n){var t=this;return this.siblings(n).then(function(n){var e=n.findIndex(function(n){return n.tx.blk.i>=t.tx.blk.i&&n.tx.i>t.tx.i});return n.splice(e,0,t),n})}},{key:"selfAndDescendants",value:function(n){var e=this;return this.descendants(n).then(function(n){return[e].concat(n)})}},{key:"selfAndVersions",value:function(n){var t=this;return this.versions(n).then(function(n){var e=n.findIndex(function(n){return n.tx.blk.i>=t.tx.blk.i&&n.tx.i>t.tx.i});return n.splice(e,0,t),n})}},{key:"id",get:function(){return this.tx.node.id}},{key:"txid",get:function(){return this.tx.node.tx}},{key:"address",get:function(){return this.tx.node.a}},{key:"isRoot",get:function(){return!this.tx.parent}},{key:"isChild",get:function(){return!this.isRoot}},{key:"isLeaf",get:function(){return!this.tx.child||!this.tx.child.length}},{key:"inputs",get:function(){return this.tx.in||[]}},{key:"outputs",get:function(){return this.tx.out||[]}},{key:"opReturn",get:function(){var n=this.outputs.find(function(n){if(n.tape.length){var e=n.tape[0].cell,t=e[e.length-1];return!!t&&106===t.op}});return n?n.tape:null}}]),MetaNode}();return r.mapObject=function(n){return new e(n)},{db:r,findSingleNode:function(n,e){return this.db.findSingle(n,e)},findAllNodes:function(n,e){return this.db.findAll(n,e)},findNodeById:function(n,e){var t={"node.id":n};return this.db.findSingle({find:t},e)},findNodeByTxid:function(n,e){var t={"node.tx":n};return this.db.findSingle({find:t},e)},findNodesByAddress:function(n,e){var t={"node.a":n};return this.db.findAll({find:t},e)},findNodesByParentId:function(n,e){var t={"parent.id":n,head:!0};return this.db.findAll({find:t},e)},findNodeAndDescendants:function(n,e){var t={$or:[{"node.id":n},{"ancestor.id":n}],head:!0};return this.db.findAll({find:t},e)}}});
